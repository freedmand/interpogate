// @generated by protobuf-ts 2.9.3
// @generated from protobuf file "interpogate.proto" (syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Interpogate } from "./interpogate";
import type { RunModelForwardResponse } from "./interpogate";
import type { RunModelForwardRequest } from "./interpogate";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { ExtractModelGraphResponse } from "./interpogate";
import type { VocabResponse } from "./interpogate";
import type { Empty } from "./google/protobuf/empty";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { TokenizeResponse } from "./interpogate";
import type { TokenizeRequest } from "./interpogate";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service Interpogate
 */
export interface IInterpogateClient {
    /**
     * @generated from protobuf rpc: GetTokens(TokenizeRequest) returns (TokenizeResponse);
     */
    getTokens(input: TokenizeRequest, options?: RpcOptions): UnaryCall<TokenizeRequest, TokenizeResponse>;
    /**
     * @generated from protobuf rpc: GetVocab(google.protobuf.Empty) returns (VocabResponse);
     */
    getVocab(input: Empty, options?: RpcOptions): UnaryCall<Empty, VocabResponse>;
    /**
     * @generated from protobuf rpc: ExtractModelGraph(google.protobuf.Empty) returns (ExtractModelGraphResponse);
     */
    extractModelGraph(input: Empty, options?: RpcOptions): UnaryCall<Empty, ExtractModelGraphResponse>;
    /**
     * @generated from protobuf rpc: RunModelForward(RunModelForwardRequest) returns (stream RunModelForwardResponse);
     */
    runModelForward(input: RunModelForwardRequest, options?: RpcOptions): ServerStreamingCall<RunModelForwardRequest, RunModelForwardResponse>;
}
/**
 * @generated from protobuf service Interpogate
 */
export class InterpogateClient implements IInterpogateClient, ServiceInfo {
    typeName = Interpogate.typeName;
    methods = Interpogate.methods;
    options = Interpogate.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetTokens(TokenizeRequest) returns (TokenizeResponse);
     */
    getTokens(input: TokenizeRequest, options?: RpcOptions): UnaryCall<TokenizeRequest, TokenizeResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<TokenizeRequest, TokenizeResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetVocab(google.protobuf.Empty) returns (VocabResponse);
     */
    getVocab(input: Empty, options?: RpcOptions): UnaryCall<Empty, VocabResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, VocabResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ExtractModelGraph(google.protobuf.Empty) returns (ExtractModelGraphResponse);
     */
    extractModelGraph(input: Empty, options?: RpcOptions): UnaryCall<Empty, ExtractModelGraphResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<Empty, ExtractModelGraphResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: RunModelForward(RunModelForwardRequest) returns (stream RunModelForwardResponse);
     */
    runModelForward(input: RunModelForwardRequest, options?: RpcOptions): ServerStreamingCall<RunModelForwardRequest, RunModelForwardResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<RunModelForwardRequest, RunModelForwardResponse>("serverStreaming", this._transport, method, opt, input);
    }
}
