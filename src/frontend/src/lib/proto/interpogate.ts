// @generated by protobuf-ts 2.9.3
// @generated from protobuf file "interpogate.proto" (syntax proto3)
// tslint:disable
import { Empty } from "./google/protobuf/empty";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message TokenizeRequest
 */
export interface TokenizeRequest {
    /**
     * @generated from protobuf field: string text = 1;
     */
    text: string;
}
/**
 * @generated from protobuf message ErrorResponse
 */
export interface ErrorResponse {
    /**
     * @generated from protobuf field: string message = 1;
     */
    message: string;
}
/**
 * @generated from protobuf message TokenizeResponse
 */
export interface TokenizeResponse {
    /**
     * @generated from protobuf oneof: Response
     */
    response: {
        oneofKind: "successResponse";
        /**
         * @generated from protobuf field: TokenizeResponse.SuccessResponse success_response = 1;
         */
        successResponse: TokenizeResponse_SuccessResponse;
    } | {
        oneofKind: "errorResponse";
        /**
         * @generated from protobuf field: ErrorResponse error_response = 2;
         */
        errorResponse: ErrorResponse;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message TokenizeResponse.SuccessResponse
 */
export interface TokenizeResponse_SuccessResponse {
    /**
     * @generated from protobuf field: repeated string tokens = 1;
     */
    tokens: string[];
    /**
     * @generated from protobuf field: repeated string tokens_special = 2;
     */
    tokensSpecial: string[];
    /**
     * @generated from protobuf field: repeated int32 token_ids = 3;
     */
    tokenIds: number[];
}
/**
 * @generated from protobuf message VocabResponse
 */
export interface VocabResponse {
    /**
     * @generated from protobuf oneof: Response
     */
    response: {
        oneofKind: "successResponse";
        /**
         * @generated from protobuf field: VocabResponse.SuccessResponse success_response = 1;
         */
        successResponse: VocabResponse_SuccessResponse;
    } | {
        oneofKind: "errorResponse";
        /**
         * @generated from protobuf field: ErrorResponse error_response = 2;
         */
        errorResponse: ErrorResponse;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message VocabResponse.SuccessResponse
 */
export interface VocabResponse_SuccessResponse {
    /**
     * @generated from protobuf field: repeated string vocab = 1;
     */
    vocab: string[];
}
/**
 * @generated from protobuf message ModelNodeParam
 */
export interface ModelNodeParam {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: Shape shape = 2;
     */
    shape?: Shape;
    /**
     * @generated from protobuf field: string dtype = 3;
     */
    dtype: string;
}
/**
 * @generated from protobuf message Visualization
 */
export interface Visualization {
    /**
     * @generated from protobuf oneof: VizType
     */
    vizType: {
        oneofKind: "attentionViz";
        /**
         * @generated from protobuf field: Visualization.AttentionVisualization attention_viz = 1;
         */
        attentionViz: Visualization_AttentionVisualization;
    } | {
        oneofKind: "barGraphViz";
        /**
         * @generated from protobuf field: Visualization.BarGraphVisualization bar_graph_viz = 2;
         */
        barGraphViz: Visualization_BarGraphVisualization;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message Visualization.Spread
 */
export interface Visualization_Spread {
    /**
     * @generated from protobuf field: int32 dim = 1;
     */
    dim: number;
    /**
     * @generated from protobuf field: int32 spread = 2;
     */
    spread: number;
}
/**
 * @generated from protobuf message Visualization.AttentionVisualization
 */
export interface Visualization_AttentionVisualization {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string modelNodeId = 2;
     */
    modelNodeId: string;
    /**
     * @generated from protobuf field: repeated Key key_path = 3;
     */
    keyPath: Key[];
    /**
     * @generated from protobuf field: int32 attention_x_dim = 4;
     */
    attentionXDim: number;
    /**
     * @generated from protobuf field: int32 attention_y_dim = 5;
     */
    attentionYDim: number;
    /**
     * @generated from protobuf field: optional Visualization.Spread spread = 6;
     */
    spread?: Visualization_Spread;
    /**
     * @generated from protobuf field: repeated int32 average_dims = 7;
     */
    averageDims: number[];
}
/**
 * @generated from protobuf message Visualization.BarGraphVisualization
 */
export interface Visualization_BarGraphVisualization {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string modelNodeId = 2;
     */
    modelNodeId: string;
    /**
     * @generated from protobuf field: repeated Key key_path = 3;
     */
    keyPath: Key[];
    /**
     * @generated from protobuf field: int32 plot_dimension = 4;
     */
    plotDimension: number;
    /**
     * @generated from protobuf field: optional Visualization.Spread spread = 5;
     */
    spread?: Visualization_Spread;
    /**
     * @generated from protobuf field: repeated int32 average_dims = 6;
     */
    averageDims: number[];
}
/**
 * @generated from protobuf message ModelNode
 */
export interface ModelNode {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: string classname = 2;
     */
    classname: string;
    /**
     * @generated from protobuf field: string id = 3;
     */
    id: string;
    /**
     * @generated from protobuf field: optional int32 in_features = 4;
     */
    inFeatures?: number;
    /**
     * @generated from protobuf field: optional int32 out_features = 5;
     */
    outFeatures?: number;
    /**
     * @generated from protobuf field: repeated ModelNode children = 6;
     */
    children: ModelNode[];
    /**
     * @generated from protobuf field: repeated ModelNodeParam params = 7;
     */
    params: ModelNodeParam[];
}
/**
 * @generated from protobuf message Visualizations
 */
export interface Visualizations {
    /**
     * @generated from protobuf field: repeated Visualization visualizations = 1;
     */
    visualizations: Visualization[];
}
/**
 * @generated from protobuf message VisualizationMap
 */
export interface VisualizationMap {
    /**
     * @generated from protobuf field: map<string, Visualizations> visualization_map = 1;
     */
    visualizationMap: {
        [key: string]: Visualizations;
    };
}
/**
 * @generated from protobuf message ExtractModelGraphResponse
 */
export interface ExtractModelGraphResponse {
    /**
     * @generated from protobuf oneof: Response
     */
    response: {
        oneofKind: "successResponse";
        /**
         * @generated from protobuf field: ExtractModelGraphResponse.SuccessResponse success_response = 1;
         */
        successResponse: ExtractModelGraphResponse_SuccessResponse;
    } | {
        oneofKind: "errorResponse";
        /**
         * @generated from protobuf field: ErrorResponse error_response = 2;
         */
        errorResponse: ErrorResponse;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message ExtractModelGraphResponse.SuccessResponse
 */
export interface ExtractModelGraphResponse_SuccessResponse {
    /**
     * @generated from protobuf field: ModelNode model_node = 1;
     */
    modelNode?: ModelNode;
}
/**
 * @generated from protobuf message RunModelForwardRequest
 */
export interface RunModelForwardRequest {
    /**
     * @generated from protobuf field: repeated int32 token_ids = 1;
     */
    tokenIds: number[];
    /**
     * @generated from protobuf field: VisualizationMap visualization_map = 2;
     */
    visualizationMap?: VisualizationMap;
}
/**
 * @generated from protobuf message Shape
 */
export interface Shape {
    /**
     * @generated from protobuf field: repeated int32 shape = 1;
     */
    shape: number[];
}
/**
 * @generated from protobuf message ListShape
 */
export interface ListShape {
    /**
     * @generated from protobuf field: repeated ComplexShape list_shape = 1;
     */
    listShape: ComplexShape[];
}
/**
 * @generated from protobuf message MapShape
 */
export interface MapShape {
    /**
     * @generated from protobuf field: map<string, ComplexShape> map_shape = 1;
     */
    mapShape: {
        [key: string]: ComplexShape;
    };
}
/**
 * @generated from protobuf message ComplexShape
 */
export interface ComplexShape {
    /**
     * @generated from protobuf oneof: ShapeType
     */
    shapeType: {
        oneofKind: "listShape";
        /**
         * @generated from protobuf field: ListShape list_shape = 1;
         */
        listShape: ListShape;
    } | {
        oneofKind: "dictShape";
        /**
         * @generated from protobuf field: MapShape dict_shape = 2;
         */
        dictShape: MapShape;
    } | {
        oneofKind: "classShape";
        /**
         * @generated from protobuf field: MapShape class_shape = 3;
         */
        classShape: MapShape;
    } | {
        oneofKind: "shape";
        /**
         * @generated from protobuf field: Shape shape = 4;
         */
        shape: Shape;
    } | {
        oneofKind: "type";
        /**
         * @generated from protobuf field: string type = 5;
         */
        type: string;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message Key
 */
export interface Key {
    /**
     * @generated from protobuf oneof: KeyType
     */
    keyType: {
        oneofKind: "listKey";
        /**
         * @generated from protobuf field: int32 list_key = 1;
         */
        listKey: number;
    } | {
        oneofKind: "dictKey";
        /**
         * @generated from protobuf field: string dict_key = 2;
         */
        dictKey: string;
    } | {
        oneofKind: "classKey";
        /**
         * @generated from protobuf field: string class_key = 3;
         */
        classKey: string;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message VisualizationResponse
 */
export interface VisualizationResponse {
    /**
     * @generated from protobuf field: string visualization_id = 1;
     */
    visualizationId: string;
    /**
     * @generated from protobuf field: bytes output = 2;
     */
    output: Uint8Array;
}
/**
 * @generated from protobuf message RunModelForwardResponse
 */
export interface RunModelForwardResponse {
    /**
     * @generated from protobuf oneof: Response
     */
    response: {
        oneofKind: "errorResponse";
        /**
         * @generated from protobuf field: ErrorResponse error_response = 1;
         */
        errorResponse: ErrorResponse;
    } | {
        oneofKind: "preHookResponse";
        /**
         * @generated from protobuf field: RunModelForwardResponse.PreHookResponse pre_hook_response = 2;
         */
        preHookResponse: RunModelForwardResponse_PreHookResponse;
    } | {
        oneofKind: "postHookResponse";
        /**
         * @generated from protobuf field: RunModelForwardResponse.PostHookResponse post_hook_response = 3;
         */
        postHookResponse: RunModelForwardResponse_PostHookResponse;
    } | {
        oneofKind: "doneResponse";
        /**
         * @generated from protobuf field: RunModelForwardResponse.DoneResponse done_response = 4;
         */
        doneResponse: RunModelForwardResponse_DoneResponse;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message RunModelForwardResponse.PreHookResponse
 */
export interface RunModelForwardResponse_PreHookResponse {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: ComplexShape input_shape = 2;
     */
    inputShape?: ComplexShape;
}
/**
 * @generated from protobuf message RunModelForwardResponse.PostHookResponse
 */
export interface RunModelForwardResponse_PostHookResponse {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: ComplexShape input_shape = 2;
     */
    inputShape?: ComplexShape;
    /**
     * @generated from protobuf field: ComplexShape output_shape = 3;
     */
    outputShape?: ComplexShape;
    /**
     * @generated from protobuf field: repeated VisualizationResponse visualization_responses = 4;
     */
    visualizationResponses: VisualizationResponse[];
}
/**
 * @generated from protobuf message RunModelForwardResponse.DoneResponse
 */
export interface RunModelForwardResponse_DoneResponse {
    /**
     * @generated from protobuf field: bytes output = 1;
     */
    output: Uint8Array;
}
// @generated message type with reflection information, may provide speed optimized methods
class TokenizeRequest$Type extends MessageType<TokenizeRequest> {
    constructor() {
        super("TokenizeRequest", [
            { no: 1, name: "text", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TokenizeRequest>): TokenizeRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.text = "";
        if (value !== undefined)
            reflectionMergePartial<TokenizeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TokenizeRequest): TokenizeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string text */ 1:
                    message.text = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TokenizeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string text = 1; */
        if (message.text !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.text);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TokenizeRequest
 */
export const TokenizeRequest = new TokenizeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ErrorResponse$Type extends MessageType<ErrorResponse> {
    constructor() {
        super("ErrorResponse", [
            { no: 1, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ErrorResponse>): ErrorResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.message = "";
        if (value !== undefined)
            reflectionMergePartial<ErrorResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ErrorResponse): ErrorResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string message */ 1:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ErrorResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string message = 1; */
        if (message.message !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ErrorResponse
 */
export const ErrorResponse = new ErrorResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TokenizeResponse$Type extends MessageType<TokenizeResponse> {
    constructor() {
        super("TokenizeResponse", [
            { no: 1, name: "success_response", kind: "message", oneof: "response", T: () => TokenizeResponse_SuccessResponse },
            { no: 2, name: "error_response", kind: "message", oneof: "response", T: () => ErrorResponse }
        ]);
    }
    create(value?: PartialMessage<TokenizeResponse>): TokenizeResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.response = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<TokenizeResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TokenizeResponse): TokenizeResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* TokenizeResponse.SuccessResponse success_response */ 1:
                    message.response = {
                        oneofKind: "successResponse",
                        successResponse: TokenizeResponse_SuccessResponse.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).successResponse)
                    };
                    break;
                case /* ErrorResponse error_response */ 2:
                    message.response = {
                        oneofKind: "errorResponse",
                        errorResponse: ErrorResponse.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).errorResponse)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TokenizeResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* TokenizeResponse.SuccessResponse success_response = 1; */
        if (message.response.oneofKind === "successResponse")
            TokenizeResponse_SuccessResponse.internalBinaryWrite(message.response.successResponse, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* ErrorResponse error_response = 2; */
        if (message.response.oneofKind === "errorResponse")
            ErrorResponse.internalBinaryWrite(message.response.errorResponse, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TokenizeResponse
 */
export const TokenizeResponse = new TokenizeResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TokenizeResponse_SuccessResponse$Type extends MessageType<TokenizeResponse_SuccessResponse> {
    constructor() {
        super("TokenizeResponse.SuccessResponse", [
            { no: 1, name: "tokens", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "tokens_special", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "token_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<TokenizeResponse_SuccessResponse>): TokenizeResponse_SuccessResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.tokens = [];
        message.tokensSpecial = [];
        message.tokenIds = [];
        if (value !== undefined)
            reflectionMergePartial<TokenizeResponse_SuccessResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TokenizeResponse_SuccessResponse): TokenizeResponse_SuccessResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string tokens */ 1:
                    message.tokens.push(reader.string());
                    break;
                case /* repeated string tokens_special */ 2:
                    message.tokensSpecial.push(reader.string());
                    break;
                case /* repeated int32 token_ids */ 3:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.tokenIds.push(reader.int32());
                    else
                        message.tokenIds.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TokenizeResponse_SuccessResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string tokens = 1; */
        for (let i = 0; i < message.tokens.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.tokens[i]);
        /* repeated string tokens_special = 2; */
        for (let i = 0; i < message.tokensSpecial.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.tokensSpecial[i]);
        /* repeated int32 token_ids = 3; */
        if (message.tokenIds.length) {
            writer.tag(3, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.tokenIds.length; i++)
                writer.int32(message.tokenIds[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message TokenizeResponse.SuccessResponse
 */
export const TokenizeResponse_SuccessResponse = new TokenizeResponse_SuccessResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VocabResponse$Type extends MessageType<VocabResponse> {
    constructor() {
        super("VocabResponse", [
            { no: 1, name: "success_response", kind: "message", oneof: "response", T: () => VocabResponse_SuccessResponse },
            { no: 2, name: "error_response", kind: "message", oneof: "response", T: () => ErrorResponse }
        ]);
    }
    create(value?: PartialMessage<VocabResponse>): VocabResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.response = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<VocabResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VocabResponse): VocabResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* VocabResponse.SuccessResponse success_response */ 1:
                    message.response = {
                        oneofKind: "successResponse",
                        successResponse: VocabResponse_SuccessResponse.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).successResponse)
                    };
                    break;
                case /* ErrorResponse error_response */ 2:
                    message.response = {
                        oneofKind: "errorResponse",
                        errorResponse: ErrorResponse.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).errorResponse)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VocabResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* VocabResponse.SuccessResponse success_response = 1; */
        if (message.response.oneofKind === "successResponse")
            VocabResponse_SuccessResponse.internalBinaryWrite(message.response.successResponse, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* ErrorResponse error_response = 2; */
        if (message.response.oneofKind === "errorResponse")
            ErrorResponse.internalBinaryWrite(message.response.errorResponse, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message VocabResponse
 */
export const VocabResponse = new VocabResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VocabResponse_SuccessResponse$Type extends MessageType<VocabResponse_SuccessResponse> {
    constructor() {
        super("VocabResponse.SuccessResponse", [
            { no: 1, name: "vocab", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<VocabResponse_SuccessResponse>): VocabResponse_SuccessResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.vocab = [];
        if (value !== undefined)
            reflectionMergePartial<VocabResponse_SuccessResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VocabResponse_SuccessResponse): VocabResponse_SuccessResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string vocab */ 1:
                    message.vocab.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VocabResponse_SuccessResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string vocab = 1; */
        for (let i = 0; i < message.vocab.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.vocab[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message VocabResponse.SuccessResponse
 */
export const VocabResponse_SuccessResponse = new VocabResponse_SuccessResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ModelNodeParam$Type extends MessageType<ModelNodeParam> {
    constructor() {
        super("ModelNodeParam", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "shape", kind: "message", T: () => Shape },
            { no: 3, name: "dtype", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ModelNodeParam>): ModelNodeParam {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.dtype = "";
        if (value !== undefined)
            reflectionMergePartial<ModelNodeParam>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ModelNodeParam): ModelNodeParam {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* Shape shape */ 2:
                    message.shape = Shape.internalBinaryRead(reader, reader.uint32(), options, message.shape);
                    break;
                case /* string dtype */ 3:
                    message.dtype = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ModelNodeParam, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* Shape shape = 2; */
        if (message.shape)
            Shape.internalBinaryWrite(message.shape, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string dtype = 3; */
        if (message.dtype !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.dtype);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ModelNodeParam
 */
export const ModelNodeParam = new ModelNodeParam$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Visualization$Type extends MessageType<Visualization> {
    constructor() {
        super("Visualization", [
            { no: 1, name: "attention_viz", kind: "message", oneof: "vizType", T: () => Visualization_AttentionVisualization },
            { no: 2, name: "bar_graph_viz", kind: "message", oneof: "vizType", T: () => Visualization_BarGraphVisualization }
        ]);
    }
    create(value?: PartialMessage<Visualization>): Visualization {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.vizType = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<Visualization>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Visualization): Visualization {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Visualization.AttentionVisualization attention_viz */ 1:
                    message.vizType = {
                        oneofKind: "attentionViz",
                        attentionViz: Visualization_AttentionVisualization.internalBinaryRead(reader, reader.uint32(), options, (message.vizType as any).attentionViz)
                    };
                    break;
                case /* Visualization.BarGraphVisualization bar_graph_viz */ 2:
                    message.vizType = {
                        oneofKind: "barGraphViz",
                        barGraphViz: Visualization_BarGraphVisualization.internalBinaryRead(reader, reader.uint32(), options, (message.vizType as any).barGraphViz)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Visualization, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Visualization.AttentionVisualization attention_viz = 1; */
        if (message.vizType.oneofKind === "attentionViz")
            Visualization_AttentionVisualization.internalBinaryWrite(message.vizType.attentionViz, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* Visualization.BarGraphVisualization bar_graph_viz = 2; */
        if (message.vizType.oneofKind === "barGraphViz")
            Visualization_BarGraphVisualization.internalBinaryWrite(message.vizType.barGraphViz, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Visualization
 */
export const Visualization = new Visualization$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Visualization_Spread$Type extends MessageType<Visualization_Spread> {
    constructor() {
        super("Visualization.Spread", [
            { no: 1, name: "dim", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "spread", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<Visualization_Spread>): Visualization_Spread {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.dim = 0;
        message.spread = 0;
        if (value !== undefined)
            reflectionMergePartial<Visualization_Spread>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Visualization_Spread): Visualization_Spread {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 dim */ 1:
                    message.dim = reader.int32();
                    break;
                case /* int32 spread */ 2:
                    message.spread = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Visualization_Spread, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 dim = 1; */
        if (message.dim !== 0)
            writer.tag(1, WireType.Varint).int32(message.dim);
        /* int32 spread = 2; */
        if (message.spread !== 0)
            writer.tag(2, WireType.Varint).int32(message.spread);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Visualization.Spread
 */
export const Visualization_Spread = new Visualization_Spread$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Visualization_AttentionVisualization$Type extends MessageType<Visualization_AttentionVisualization> {
    constructor() {
        super("Visualization.AttentionVisualization", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "modelNodeId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "key_path", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Key },
            { no: 4, name: "attention_x_dim", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "attention_y_dim", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "spread", kind: "message", T: () => Visualization_Spread },
            { no: 7, name: "average_dims", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<Visualization_AttentionVisualization>): Visualization_AttentionVisualization {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.modelNodeId = "";
        message.keyPath = [];
        message.attentionXDim = 0;
        message.attentionYDim = 0;
        message.averageDims = [];
        if (value !== undefined)
            reflectionMergePartial<Visualization_AttentionVisualization>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Visualization_AttentionVisualization): Visualization_AttentionVisualization {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string modelNodeId */ 2:
                    message.modelNodeId = reader.string();
                    break;
                case /* repeated Key key_path */ 3:
                    message.keyPath.push(Key.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int32 attention_x_dim */ 4:
                    message.attentionXDim = reader.int32();
                    break;
                case /* int32 attention_y_dim */ 5:
                    message.attentionYDim = reader.int32();
                    break;
                case /* optional Visualization.Spread spread */ 6:
                    message.spread = Visualization_Spread.internalBinaryRead(reader, reader.uint32(), options, message.spread);
                    break;
                case /* repeated int32 average_dims */ 7:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.averageDims.push(reader.int32());
                    else
                        message.averageDims.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Visualization_AttentionVisualization, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string modelNodeId = 2; */
        if (message.modelNodeId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.modelNodeId);
        /* repeated Key key_path = 3; */
        for (let i = 0; i < message.keyPath.length; i++)
            Key.internalBinaryWrite(message.keyPath[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* int32 attention_x_dim = 4; */
        if (message.attentionXDim !== 0)
            writer.tag(4, WireType.Varint).int32(message.attentionXDim);
        /* int32 attention_y_dim = 5; */
        if (message.attentionYDim !== 0)
            writer.tag(5, WireType.Varint).int32(message.attentionYDim);
        /* optional Visualization.Spread spread = 6; */
        if (message.spread)
            Visualization_Spread.internalBinaryWrite(message.spread, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* repeated int32 average_dims = 7; */
        if (message.averageDims.length) {
            writer.tag(7, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.averageDims.length; i++)
                writer.int32(message.averageDims[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Visualization.AttentionVisualization
 */
export const Visualization_AttentionVisualization = new Visualization_AttentionVisualization$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Visualization_BarGraphVisualization$Type extends MessageType<Visualization_BarGraphVisualization> {
    constructor() {
        super("Visualization.BarGraphVisualization", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "modelNodeId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "key_path", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Key },
            { no: 4, name: "plot_dimension", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "spread", kind: "message", T: () => Visualization_Spread },
            { no: 6, name: "average_dims", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<Visualization_BarGraphVisualization>): Visualization_BarGraphVisualization {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.modelNodeId = "";
        message.keyPath = [];
        message.plotDimension = 0;
        message.averageDims = [];
        if (value !== undefined)
            reflectionMergePartial<Visualization_BarGraphVisualization>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Visualization_BarGraphVisualization): Visualization_BarGraphVisualization {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string modelNodeId */ 2:
                    message.modelNodeId = reader.string();
                    break;
                case /* repeated Key key_path */ 3:
                    message.keyPath.push(Key.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int32 plot_dimension */ 4:
                    message.plotDimension = reader.int32();
                    break;
                case /* optional Visualization.Spread spread */ 5:
                    message.spread = Visualization_Spread.internalBinaryRead(reader, reader.uint32(), options, message.spread);
                    break;
                case /* repeated int32 average_dims */ 6:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.averageDims.push(reader.int32());
                    else
                        message.averageDims.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Visualization_BarGraphVisualization, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string modelNodeId = 2; */
        if (message.modelNodeId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.modelNodeId);
        /* repeated Key key_path = 3; */
        for (let i = 0; i < message.keyPath.length; i++)
            Key.internalBinaryWrite(message.keyPath[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* int32 plot_dimension = 4; */
        if (message.plotDimension !== 0)
            writer.tag(4, WireType.Varint).int32(message.plotDimension);
        /* optional Visualization.Spread spread = 5; */
        if (message.spread)
            Visualization_Spread.internalBinaryWrite(message.spread, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* repeated int32 average_dims = 6; */
        if (message.averageDims.length) {
            writer.tag(6, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.averageDims.length; i++)
                writer.int32(message.averageDims[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Visualization.BarGraphVisualization
 */
export const Visualization_BarGraphVisualization = new Visualization_BarGraphVisualization$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ModelNode$Type extends MessageType<ModelNode> {
    constructor() {
        super("ModelNode", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "classname", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "in_features", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "out_features", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "children", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ModelNode },
            { no: 7, name: "params", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ModelNodeParam }
        ]);
    }
    create(value?: PartialMessage<ModelNode>): ModelNode {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.classname = "";
        message.id = "";
        message.children = [];
        message.params = [];
        if (value !== undefined)
            reflectionMergePartial<ModelNode>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ModelNode): ModelNode {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string classname */ 2:
                    message.classname = reader.string();
                    break;
                case /* string id */ 3:
                    message.id = reader.string();
                    break;
                case /* optional int32 in_features */ 4:
                    message.inFeatures = reader.int32();
                    break;
                case /* optional int32 out_features */ 5:
                    message.outFeatures = reader.int32();
                    break;
                case /* repeated ModelNode children */ 6:
                    message.children.push(ModelNode.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated ModelNodeParam params */ 7:
                    message.params.push(ModelNodeParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ModelNode, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string classname = 2; */
        if (message.classname !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.classname);
        /* string id = 3; */
        if (message.id !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.id);
        /* optional int32 in_features = 4; */
        if (message.inFeatures !== undefined)
            writer.tag(4, WireType.Varint).int32(message.inFeatures);
        /* optional int32 out_features = 5; */
        if (message.outFeatures !== undefined)
            writer.tag(5, WireType.Varint).int32(message.outFeatures);
        /* repeated ModelNode children = 6; */
        for (let i = 0; i < message.children.length; i++)
            ModelNode.internalBinaryWrite(message.children[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* repeated ModelNodeParam params = 7; */
        for (let i = 0; i < message.params.length; i++)
            ModelNodeParam.internalBinaryWrite(message.params[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ModelNode
 */
export const ModelNode = new ModelNode$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Visualizations$Type extends MessageType<Visualizations> {
    constructor() {
        super("Visualizations", [
            { no: 1, name: "visualizations", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Visualization }
        ]);
    }
    create(value?: PartialMessage<Visualizations>): Visualizations {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.visualizations = [];
        if (value !== undefined)
            reflectionMergePartial<Visualizations>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Visualizations): Visualizations {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated Visualization visualizations */ 1:
                    message.visualizations.push(Visualization.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Visualizations, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated Visualization visualizations = 1; */
        for (let i = 0; i < message.visualizations.length; i++)
            Visualization.internalBinaryWrite(message.visualizations[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Visualizations
 */
export const Visualizations = new Visualizations$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VisualizationMap$Type extends MessageType<VisualizationMap> {
    constructor() {
        super("VisualizationMap", [
            { no: 1, name: "visualization_map", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => Visualizations } }
        ]);
    }
    create(value?: PartialMessage<VisualizationMap>): VisualizationMap {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.visualizationMap = {};
        if (value !== undefined)
            reflectionMergePartial<VisualizationMap>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VisualizationMap): VisualizationMap {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<string, Visualizations> visualization_map */ 1:
                    this.binaryReadMap1(message.visualizationMap, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap1(map: VisualizationMap["visualizationMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof VisualizationMap["visualizationMap"] | undefined, val: VisualizationMap["visualizationMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = Visualizations.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field VisualizationMap.visualization_map");
            }
        }
        map[key ?? ""] = val ?? Visualizations.create();
    }
    internalBinaryWrite(message: VisualizationMap, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<string, Visualizations> visualization_map = 1; */
        for (let k of globalThis.Object.keys(message.visualizationMap)) {
            writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            Visualizations.internalBinaryWrite(message.visualizationMap[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message VisualizationMap
 */
export const VisualizationMap = new VisualizationMap$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExtractModelGraphResponse$Type extends MessageType<ExtractModelGraphResponse> {
    constructor() {
        super("ExtractModelGraphResponse", [
            { no: 1, name: "success_response", kind: "message", oneof: "response", T: () => ExtractModelGraphResponse_SuccessResponse },
            { no: 2, name: "error_response", kind: "message", oneof: "response", T: () => ErrorResponse }
        ]);
    }
    create(value?: PartialMessage<ExtractModelGraphResponse>): ExtractModelGraphResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.response = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<ExtractModelGraphResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExtractModelGraphResponse): ExtractModelGraphResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ExtractModelGraphResponse.SuccessResponse success_response */ 1:
                    message.response = {
                        oneofKind: "successResponse",
                        successResponse: ExtractModelGraphResponse_SuccessResponse.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).successResponse)
                    };
                    break;
                case /* ErrorResponse error_response */ 2:
                    message.response = {
                        oneofKind: "errorResponse",
                        errorResponse: ErrorResponse.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).errorResponse)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExtractModelGraphResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ExtractModelGraphResponse.SuccessResponse success_response = 1; */
        if (message.response.oneofKind === "successResponse")
            ExtractModelGraphResponse_SuccessResponse.internalBinaryWrite(message.response.successResponse, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* ErrorResponse error_response = 2; */
        if (message.response.oneofKind === "errorResponse")
            ErrorResponse.internalBinaryWrite(message.response.errorResponse, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ExtractModelGraphResponse
 */
export const ExtractModelGraphResponse = new ExtractModelGraphResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExtractModelGraphResponse_SuccessResponse$Type extends MessageType<ExtractModelGraphResponse_SuccessResponse> {
    constructor() {
        super("ExtractModelGraphResponse.SuccessResponse", [
            { no: 1, name: "model_node", kind: "message", T: () => ModelNode }
        ]);
    }
    create(value?: PartialMessage<ExtractModelGraphResponse_SuccessResponse>): ExtractModelGraphResponse_SuccessResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ExtractModelGraphResponse_SuccessResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExtractModelGraphResponse_SuccessResponse): ExtractModelGraphResponse_SuccessResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ModelNode model_node */ 1:
                    message.modelNode = ModelNode.internalBinaryRead(reader, reader.uint32(), options, message.modelNode);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExtractModelGraphResponse_SuccessResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ModelNode model_node = 1; */
        if (message.modelNode)
            ModelNode.internalBinaryWrite(message.modelNode, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ExtractModelGraphResponse.SuccessResponse
 */
export const ExtractModelGraphResponse_SuccessResponse = new ExtractModelGraphResponse_SuccessResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RunModelForwardRequest$Type extends MessageType<RunModelForwardRequest> {
    constructor() {
        super("RunModelForwardRequest", [
            { no: 1, name: "token_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "visualization_map", kind: "message", T: () => VisualizationMap }
        ]);
    }
    create(value?: PartialMessage<RunModelForwardRequest>): RunModelForwardRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.tokenIds = [];
        if (value !== undefined)
            reflectionMergePartial<RunModelForwardRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RunModelForwardRequest): RunModelForwardRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated int32 token_ids */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.tokenIds.push(reader.int32());
                    else
                        message.tokenIds.push(reader.int32());
                    break;
                case /* VisualizationMap visualization_map */ 2:
                    message.visualizationMap = VisualizationMap.internalBinaryRead(reader, reader.uint32(), options, message.visualizationMap);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RunModelForwardRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated int32 token_ids = 1; */
        if (message.tokenIds.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.tokenIds.length; i++)
                writer.int32(message.tokenIds[i]);
            writer.join();
        }
        /* VisualizationMap visualization_map = 2; */
        if (message.visualizationMap)
            VisualizationMap.internalBinaryWrite(message.visualizationMap, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RunModelForwardRequest
 */
export const RunModelForwardRequest = new RunModelForwardRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Shape$Type extends MessageType<Shape> {
    constructor() {
        super("Shape", [
            { no: 1, name: "shape", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<Shape>): Shape {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.shape = [];
        if (value !== undefined)
            reflectionMergePartial<Shape>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Shape): Shape {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated int32 shape */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.shape.push(reader.int32());
                    else
                        message.shape.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Shape, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated int32 shape = 1; */
        if (message.shape.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.shape.length; i++)
                writer.int32(message.shape[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Shape
 */
export const Shape = new Shape$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListShape$Type extends MessageType<ListShape> {
    constructor() {
        super("ListShape", [
            { no: 1, name: "list_shape", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ComplexShape }
        ]);
    }
    create(value?: PartialMessage<ListShape>): ListShape {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.listShape = [];
        if (value !== undefined)
            reflectionMergePartial<ListShape>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListShape): ListShape {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated ComplexShape list_shape */ 1:
                    message.listShape.push(ComplexShape.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListShape, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated ComplexShape list_shape = 1; */
        for (let i = 0; i < message.listShape.length; i++)
            ComplexShape.internalBinaryWrite(message.listShape[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ListShape
 */
export const ListShape = new ListShape$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MapShape$Type extends MessageType<MapShape> {
    constructor() {
        super("MapShape", [
            { no: 1, name: "map_shape", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => ComplexShape } }
        ]);
    }
    create(value?: PartialMessage<MapShape>): MapShape {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.mapShape = {};
        if (value !== undefined)
            reflectionMergePartial<MapShape>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MapShape): MapShape {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<string, ComplexShape> map_shape */ 1:
                    this.binaryReadMap1(message.mapShape, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap1(map: MapShape["mapShape"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof MapShape["mapShape"] | undefined, val: MapShape["mapShape"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = ComplexShape.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field MapShape.map_shape");
            }
        }
        map[key ?? ""] = val ?? ComplexShape.create();
    }
    internalBinaryWrite(message: MapShape, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<string, ComplexShape> map_shape = 1; */
        for (let k of globalThis.Object.keys(message.mapShape)) {
            writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            ComplexShape.internalBinaryWrite(message.mapShape[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MapShape
 */
export const MapShape = new MapShape$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ComplexShape$Type extends MessageType<ComplexShape> {
    constructor() {
        super("ComplexShape", [
            { no: 1, name: "list_shape", kind: "message", oneof: "shapeType", T: () => ListShape },
            { no: 2, name: "dict_shape", kind: "message", oneof: "shapeType", T: () => MapShape },
            { no: 3, name: "class_shape", kind: "message", oneof: "shapeType", T: () => MapShape },
            { no: 4, name: "shape", kind: "message", oneof: "shapeType", T: () => Shape },
            { no: 5, name: "type", kind: "scalar", oneof: "shapeType", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ComplexShape>): ComplexShape {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.shapeType = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<ComplexShape>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ComplexShape): ComplexShape {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ListShape list_shape */ 1:
                    message.shapeType = {
                        oneofKind: "listShape",
                        listShape: ListShape.internalBinaryRead(reader, reader.uint32(), options, (message.shapeType as any).listShape)
                    };
                    break;
                case /* MapShape dict_shape */ 2:
                    message.shapeType = {
                        oneofKind: "dictShape",
                        dictShape: MapShape.internalBinaryRead(reader, reader.uint32(), options, (message.shapeType as any).dictShape)
                    };
                    break;
                case /* MapShape class_shape */ 3:
                    message.shapeType = {
                        oneofKind: "classShape",
                        classShape: MapShape.internalBinaryRead(reader, reader.uint32(), options, (message.shapeType as any).classShape)
                    };
                    break;
                case /* Shape shape */ 4:
                    message.shapeType = {
                        oneofKind: "shape",
                        shape: Shape.internalBinaryRead(reader, reader.uint32(), options, (message.shapeType as any).shape)
                    };
                    break;
                case /* string type */ 5:
                    message.shapeType = {
                        oneofKind: "type",
                        type: reader.string()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ComplexShape, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ListShape list_shape = 1; */
        if (message.shapeType.oneofKind === "listShape")
            ListShape.internalBinaryWrite(message.shapeType.listShape, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* MapShape dict_shape = 2; */
        if (message.shapeType.oneofKind === "dictShape")
            MapShape.internalBinaryWrite(message.shapeType.dictShape, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* MapShape class_shape = 3; */
        if (message.shapeType.oneofKind === "classShape")
            MapShape.internalBinaryWrite(message.shapeType.classShape, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* Shape shape = 4; */
        if (message.shapeType.oneofKind === "shape")
            Shape.internalBinaryWrite(message.shapeType.shape, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* string type = 5; */
        if (message.shapeType.oneofKind === "type")
            writer.tag(5, WireType.LengthDelimited).string(message.shapeType.type);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ComplexShape
 */
export const ComplexShape = new ComplexShape$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Key$Type extends MessageType<Key> {
    constructor() {
        super("Key", [
            { no: 1, name: "list_key", kind: "scalar", oneof: "keyType", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "dict_key", kind: "scalar", oneof: "keyType", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "class_key", kind: "scalar", oneof: "keyType", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Key>): Key {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.keyType = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<Key>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Key): Key {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 list_key */ 1:
                    message.keyType = {
                        oneofKind: "listKey",
                        listKey: reader.int32()
                    };
                    break;
                case /* string dict_key */ 2:
                    message.keyType = {
                        oneofKind: "dictKey",
                        dictKey: reader.string()
                    };
                    break;
                case /* string class_key */ 3:
                    message.keyType = {
                        oneofKind: "classKey",
                        classKey: reader.string()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Key, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 list_key = 1; */
        if (message.keyType.oneofKind === "listKey")
            writer.tag(1, WireType.Varint).int32(message.keyType.listKey);
        /* string dict_key = 2; */
        if (message.keyType.oneofKind === "dictKey")
            writer.tag(2, WireType.LengthDelimited).string(message.keyType.dictKey);
        /* string class_key = 3; */
        if (message.keyType.oneofKind === "classKey")
            writer.tag(3, WireType.LengthDelimited).string(message.keyType.classKey);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Key
 */
export const Key = new Key$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VisualizationResponse$Type extends MessageType<VisualizationResponse> {
    constructor() {
        super("VisualizationResponse", [
            { no: 1, name: "visualization_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "output", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<VisualizationResponse>): VisualizationResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.visualizationId = "";
        message.output = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<VisualizationResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VisualizationResponse): VisualizationResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string visualization_id */ 1:
                    message.visualizationId = reader.string();
                    break;
                case /* bytes output */ 2:
                    message.output = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VisualizationResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string visualization_id = 1; */
        if (message.visualizationId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.visualizationId);
        /* bytes output = 2; */
        if (message.output.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.output);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message VisualizationResponse
 */
export const VisualizationResponse = new VisualizationResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RunModelForwardResponse$Type extends MessageType<RunModelForwardResponse> {
    constructor() {
        super("RunModelForwardResponse", [
            { no: 1, name: "error_response", kind: "message", oneof: "response", T: () => ErrorResponse },
            { no: 2, name: "pre_hook_response", kind: "message", oneof: "response", T: () => RunModelForwardResponse_PreHookResponse },
            { no: 3, name: "post_hook_response", kind: "message", oneof: "response", T: () => RunModelForwardResponse_PostHookResponse },
            { no: 4, name: "done_response", kind: "message", oneof: "response", T: () => RunModelForwardResponse_DoneResponse }
        ]);
    }
    create(value?: PartialMessage<RunModelForwardResponse>): RunModelForwardResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.response = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<RunModelForwardResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RunModelForwardResponse): RunModelForwardResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* ErrorResponse error_response */ 1:
                    message.response = {
                        oneofKind: "errorResponse",
                        errorResponse: ErrorResponse.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).errorResponse)
                    };
                    break;
                case /* RunModelForwardResponse.PreHookResponse pre_hook_response */ 2:
                    message.response = {
                        oneofKind: "preHookResponse",
                        preHookResponse: RunModelForwardResponse_PreHookResponse.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).preHookResponse)
                    };
                    break;
                case /* RunModelForwardResponse.PostHookResponse post_hook_response */ 3:
                    message.response = {
                        oneofKind: "postHookResponse",
                        postHookResponse: RunModelForwardResponse_PostHookResponse.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).postHookResponse)
                    };
                    break;
                case /* RunModelForwardResponse.DoneResponse done_response */ 4:
                    message.response = {
                        oneofKind: "doneResponse",
                        doneResponse: RunModelForwardResponse_DoneResponse.internalBinaryRead(reader, reader.uint32(), options, (message.response as any).doneResponse)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RunModelForwardResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* ErrorResponse error_response = 1; */
        if (message.response.oneofKind === "errorResponse")
            ErrorResponse.internalBinaryWrite(message.response.errorResponse, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* RunModelForwardResponse.PreHookResponse pre_hook_response = 2; */
        if (message.response.oneofKind === "preHookResponse")
            RunModelForwardResponse_PreHookResponse.internalBinaryWrite(message.response.preHookResponse, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* RunModelForwardResponse.PostHookResponse post_hook_response = 3; */
        if (message.response.oneofKind === "postHookResponse")
            RunModelForwardResponse_PostHookResponse.internalBinaryWrite(message.response.postHookResponse, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* RunModelForwardResponse.DoneResponse done_response = 4; */
        if (message.response.oneofKind === "doneResponse")
            RunModelForwardResponse_DoneResponse.internalBinaryWrite(message.response.doneResponse, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RunModelForwardResponse
 */
export const RunModelForwardResponse = new RunModelForwardResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RunModelForwardResponse_PreHookResponse$Type extends MessageType<RunModelForwardResponse_PreHookResponse> {
    constructor() {
        super("RunModelForwardResponse.PreHookResponse", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "input_shape", kind: "message", T: () => ComplexShape }
        ]);
    }
    create(value?: PartialMessage<RunModelForwardResponse_PreHookResponse>): RunModelForwardResponse_PreHookResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<RunModelForwardResponse_PreHookResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RunModelForwardResponse_PreHookResponse): RunModelForwardResponse_PreHookResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* ComplexShape input_shape */ 2:
                    message.inputShape = ComplexShape.internalBinaryRead(reader, reader.uint32(), options, message.inputShape);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RunModelForwardResponse_PreHookResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* ComplexShape input_shape = 2; */
        if (message.inputShape)
            ComplexShape.internalBinaryWrite(message.inputShape, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RunModelForwardResponse.PreHookResponse
 */
export const RunModelForwardResponse_PreHookResponse = new RunModelForwardResponse_PreHookResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RunModelForwardResponse_PostHookResponse$Type extends MessageType<RunModelForwardResponse_PostHookResponse> {
    constructor() {
        super("RunModelForwardResponse.PostHookResponse", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "input_shape", kind: "message", T: () => ComplexShape },
            { no: 3, name: "output_shape", kind: "message", T: () => ComplexShape },
            { no: 4, name: "visualization_responses", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => VisualizationResponse }
        ]);
    }
    create(value?: PartialMessage<RunModelForwardResponse_PostHookResponse>): RunModelForwardResponse_PostHookResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.visualizationResponses = [];
        if (value !== undefined)
            reflectionMergePartial<RunModelForwardResponse_PostHookResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RunModelForwardResponse_PostHookResponse): RunModelForwardResponse_PostHookResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* ComplexShape input_shape */ 2:
                    message.inputShape = ComplexShape.internalBinaryRead(reader, reader.uint32(), options, message.inputShape);
                    break;
                case /* ComplexShape output_shape */ 3:
                    message.outputShape = ComplexShape.internalBinaryRead(reader, reader.uint32(), options, message.outputShape);
                    break;
                case /* repeated VisualizationResponse visualization_responses */ 4:
                    message.visualizationResponses.push(VisualizationResponse.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RunModelForwardResponse_PostHookResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* ComplexShape input_shape = 2; */
        if (message.inputShape)
            ComplexShape.internalBinaryWrite(message.inputShape, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* ComplexShape output_shape = 3; */
        if (message.outputShape)
            ComplexShape.internalBinaryWrite(message.outputShape, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated VisualizationResponse visualization_responses = 4; */
        for (let i = 0; i < message.visualizationResponses.length; i++)
            VisualizationResponse.internalBinaryWrite(message.visualizationResponses[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RunModelForwardResponse.PostHookResponse
 */
export const RunModelForwardResponse_PostHookResponse = new RunModelForwardResponse_PostHookResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RunModelForwardResponse_DoneResponse$Type extends MessageType<RunModelForwardResponse_DoneResponse> {
    constructor() {
        super("RunModelForwardResponse.DoneResponse", [
            { no: 1, name: "output", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<RunModelForwardResponse_DoneResponse>): RunModelForwardResponse_DoneResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.output = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<RunModelForwardResponse_DoneResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RunModelForwardResponse_DoneResponse): RunModelForwardResponse_DoneResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes output */ 1:
                    message.output = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RunModelForwardResponse_DoneResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes output = 1; */
        if (message.output.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.output);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RunModelForwardResponse.DoneResponse
 */
export const RunModelForwardResponse_DoneResponse = new RunModelForwardResponse_DoneResponse$Type();
/**
 * @generated ServiceType for protobuf service Interpogate
 */
export const Interpogate = new ServiceType("Interpogate", [
    { name: "GetTokens", options: {}, I: TokenizeRequest, O: TokenizeResponse },
    { name: "GetVocab", options: {}, I: Empty, O: VocabResponse },
    { name: "ExtractModelGraph", options: {}, I: Empty, O: ExtractModelGraphResponse },
    { name: "RunModelForward", serverStreaming: true, options: {}, I: RunModelForwardRequest, O: RunModelForwardResponse }
]);
